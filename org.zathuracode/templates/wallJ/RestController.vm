package ${virginPackage}.rest.controllers;

import  ${virginPackage}.dto.mapper.I${metaData.getRealClassName()}Mapper;
import ${virginPackage}.presentation.businessDelegate.IBusinessDelegatorView;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.ws.rs.*;

import ${package}.*;
import ${package}.dto.${metaData.getRealClassName()}DTO;

@Stateless 
@LocalBean
@Path("/${metaData.getRealClassNameAsVariable()}")
public class ${metaData.getRealClassName()}RestController {
	
	private static final Logger log = LoggerFactory.getLogger(${metaData.getRealClassName()}RestController.class);

	@EJB
    private IBusinessDelegatorView businessDelegatorView;
  
  	@EJB
	private I${metaData.getRealClassName()}Mapper ${metaData.getRealClassNameAsVariable()}Mapper;
    
    @POST
    @Path("/save${metaData.getRealClassName()}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    public void save${metaData.getRealClassName()}(${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO) throws Exception {
    	try {
    		${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = ${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}DTOTo${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()}DTO);
    		
    		businessDelegatorView.save${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()});
    	} catch (Exception e) {
    		log.error(e.getMessage(), e);
    		throw e;
    	}
    }
	
    @DELETE
    #if (${primaryKey.isPrimiaryKeyAComposeKey()})	
    	@Path("/delete${metaData.getRealClassName()}#foreach($cka in $composeKeyAttributes)/{${cka.getShowName()}}#end") 
    #else	
    	@Path("/delete${metaData.getRealClassName()}/{${primaryKey.getShowName()}}") 
    #end
    @Consumes({"application/json"})
    @Produces({"application/json"})
    public void delete${metaData.getRealClassName()}(#if (${primaryKey.isPrimiaryKeyAComposeKey()}) #foreach($cka in $composeKeyAttributes) @PathParam("${cka.getShowName()}") ${cka.getType().getSimpleName()} ${cka.getShowName()} #if($foreach.hasNext) , #end #end #else @PathParam("${primaryKey.getShowName()}") ${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()}#end) throws Exception {
    	try {
    	
    		#if (${primaryKey.isPrimiaryKeyAComposeKey()})
				
				${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()} = new ${primaryKey.getType().getSimpleName()}();
				
				#foreach($cka in $composeKeyAttributes)
					${primaryKey.getShowName()}.set${cka.getShowName().substring(0,1).toUpperCase()}${cka.getShowName().substring(1,${cka.getShowName().length()})}(${cka.getShowName()});
				#end
				
				${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()});
				
			#else
				${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = businessDelegatorView.get${metaData.getRealClassName()}(${primaryKey.getShowName()});
			#end
    		
    		businessDelegatorView.delete${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()});
    	} catch (Exception e) {
    		log.error(e.getMessage(), e);
    		throw e;
    	}
    } 
    
    @PUT
    @Path("/update${metaData.getRealClassName()}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    public void update${metaData.getRealClassName()}( ${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO) throws Exception {
    	try {
    		${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = ${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}DTOTo${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()}DTO);
    		
    		businessDelegatorView.update${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()});
    	} catch (Exception e) {
    		log.error(e.getMessage(), e);
    		throw e;
    	}
    }
    
    @GET
    @Path("/getData${metaData.getRealClassName()}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    public List<${metaData.getRealClassName()}DTO> getData${metaData.getRealClassName()}( ) throws Exception {
		try {
			return businessDelegatorView.getData${metaData.getRealClassName()}();
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw e;
		}
    } 
    
    @GET
    #if (${primaryKey.isPrimiaryKeyAComposeKey()})	
    	@Path("/get${metaData.getRealClassName()}#foreach($cka in $composeKeyAttributes)/{${cka.getShowName()}}#end") 
    #else	
    	@Path("/get${metaData.getRealClassName()}/{${primaryKey.getShowName()}}") 
    #end
    @Consumes({"application/json"})
    @Produces({"application/json"})
    public ${metaData.getRealClassName()}DTO get${metaData.getRealClassName()}(#if (${primaryKey.isPrimiaryKeyAComposeKey()}) #foreach($cka in $composeKeyAttributes) @PathParam("${cka.getShowName()}") ${cka.getType().getSimpleName()} ${cka.getShowName()} #if($foreach.hasNext) , #end #end #else @PathParam("${primaryKey.getShowName()}") ${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()}#end) throws Exception {
    	try {
    		
    		#if (${primaryKey.isPrimiaryKeyAComposeKey()})
				
				${primaryKey.getType().getSimpleName()} ${primaryKey.getShowName()} = new ${primaryKey.getType().getSimpleName()}();
				
				#foreach($cka in $composeKeyAttributes)
					${primaryKey.getShowName()}.set${cka.getShowName().substring(0,1).toUpperCase()}${cka.getShowName().substring(1,${cka.getShowName().length()})}(${cka.getShowName()});
				#end
				
				${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = businessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()});
				
			#else
				${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = businessDelegatorView.get${metaData.getRealClassName()}(${primaryKey.getShowName()});
			#end
    		
			return ${metaData.getRealClassNameAsVariable()}Mapper.${metaData.getRealClassNameAsVariable()}To${metaData.getRealClassName()}DTO(${metaData.getRealClassNameAsVariable()});
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
		return null;
    }
        
    
} 