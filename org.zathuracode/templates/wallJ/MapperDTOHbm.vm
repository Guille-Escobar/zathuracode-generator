package ${virginPackage}.dto.mapper;
import $package.${metaData.getRealClassName()};
import ${package}.dto.${metaData.getRealClassName()}DTO;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ejb.EJB;
import javax.ejb.Singleton;
import javax.ejb.TransactionAttribute;

import 	${package}.control.*;
import ${package}.*;

/**
* @author Zathura Code Generator http://zathuracode.org/
* www.zathuracode.org
* 
*/
@Singleton
public class ${metaData.getRealClassName()}Mapper implements I${metaData.getRealClassName()}Mapper {
	
	private static final Logger log = LoggerFactory.getLogger(${metaData.getRealClassName()}Mapper.class);

    #if(${metaData.isGetManyToOneProperties()})
		#foreach($member  in ${metaData.getManyToOneProperties()})
            /**
		 	* Logic injected by Spring that manages ${member.getRealClassName()} entities
		 	* 
		 	*/
			@EJB
			I${member.getRealClassName()}Logic logic${member.getRealClassName()}$velocityCount;
		#end
    #end
	
	@TransactionAttribute
	public ${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}To${metaData.getRealClassName()}DTO(${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()})throws Exception{
		try{
			
			${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO = new ${metaData.getRealClassName()}DTO();
			
			#foreach($member2  in $dtoAttributes)
                ${member2}
            #end
			#foreach($member2  in $dtoAttributes2)
                ${member2}
            #end
					
			return ${metaData.getRealClassNameAsVariable()}DTO ;
					
		}catch(Exception e){
			throw e;	
		}
	}
	
	@TransactionAttribute
	public ${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()}DTOTo${metaData.getRealClassName()}(${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO)throws Exception{
		try{
			
			${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = new ${metaData.getRealClassName()}();
			
			#foreach($member2  in $entityAttributes)
                ${member2}
            #end
			#foreach($member2  in $entityAttributes2)
                ${member2}
            #end
				
			return ${metaData.getRealClassNameAsVariable()};
			
		}catch(Exception e){
			throw e;	
		}
			
	}
	
	@TransactionAttribute
	public List<${metaData.getRealClassName()}DTO> list${metaData.getRealClassName()}ToList${metaData.getRealClassName()}DTO(List<${metaData.getRealClassName()}> list${metaData.getRealClassName()}) throws Exception{
		try{
			List<${metaData.getRealClassName()}DTO> ${metaData.getRealClassNameAsVariable()}DTOs = new ArrayList<${metaData.getRealClassName()}DTO>();
			
			for (${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} : list${metaData.getRealClassName()}) {
				
				${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO = ${metaData.getRealClassNameAsVariable()}To${metaData.getRealClassName()}DTO(${metaData.getRealClassNameAsVariable()});
				
				${metaData.getRealClassNameAsVariable()}DTOs.add(${metaData.getRealClassNameAsVariable()}DTO);
			}
			
			return ${metaData.getRealClassNameAsVariable()}DTOs;
		}catch(Exception e){
			throw e;	
		}
		
			
	}
	
	@TransactionAttribute
	public List<${metaData.getRealClassName()}> list${metaData.getRealClassName()}DTOToList${metaData.getRealClassName()}(List<${metaData.getRealClassName()}DTO> list${metaData.getRealClassName()}DTO) throws Exception{
		try{
			List<${metaData.getRealClassName()}> list${metaData.getRealClassName()} = new ArrayList<${metaData.getRealClassName()}>();
			
			for (${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO : list${metaData.getRealClassName()}DTO) {
				
				${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()} = ${metaData.getRealClassNameAsVariable()}DTOTo${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()}DTO);
				
				list${metaData.getRealClassName()}.add(${metaData.getRealClassNameAsVariable()});
			}
			
			return list${metaData.getRealClassName()};
		}catch(Exception e){
			throw e;	
		}
		
			
	}		
	
}
