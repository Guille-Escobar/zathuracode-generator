package  ${virginPackage}.repository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Repository;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import $package.${metaData.getRealClassName()};

#if($composedKey)
    import $package.${metaData.primaryKey.getRealClassName()};
#end

/**
 * A Repository providing persistence and search support for
 * ${metaData.getRealClassName()} entities. Transaction control of the save(), update() and
 * delete() operations can directly support Spring container-managed
 * transactions or they can be augmented to handle user-managed Spring
 * transactions. Each of these methods provides additional information for how
 * to configure it for the desired type of transaction control.
 * 
 * @see lidis.${metaData.getRealClassName()}
 */
@Scope("singleton")
@Repository()
public class ${metaData.getRealClassName()}RepositoryImpl extends JpaRepositoryImpl<${metaData.getRealClassName()}, ${metaData.getPrimaryKey().getType().getSimpleName()}> implements ${metaData.getRealClassName()}Repository {

	private static final Logger log = LoggerFactory.getLogger(${metaData.getRealClassName()}RepositoryImpl.class);
	
	@PersistenceContext
    private EntityManager entityManager;
    
	public static ${metaData.getRealClassName()}Repository getFromApplicationContext(ApplicationContext ctx) {
		log.info("getFromApplicationContext");
        return (${metaData.getRealClassName()}Repository) ctx.getBean("${metaData.getRealClassName()}Repository");
    }  
 }
